# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#priority-of-environment-variables
image: node:current-alpine3.11

stages:
  - init
  - lint
  - test
  - build
  - deploy

before_script:
  - echo "Pipeline ID = $CI_PIPELINE_ID"
  - echo "Project name = $CI_PROJECT_NAME"
  - echo "Build ref = $CI_BUILD_REF_NAME"
  - pwd
  - ls -ail

after_script:
  - pwd
  - ls -ail

cache:
  paths:
    - node_modules/

initialize_npm:
  stage: init
  script:
    - npm install
    - echo DISCORD_TOKEN=$DISCORD_TOKEN >> .env

eslint:
  stage: lint
  script:
    - npm install --only-dev
    - npx eslint . --ext .ts --format gitlab
  artifacts:
    reports:
      codequality: gl-codequality.json
  needs: []

sast:
  stage: test
  needs: []

include:
  - template: Security/SAST.gitlab-ci.yml

variables:
  SAST_EXPERIMENTAL_FEATURES: "true"

semgrep-sast:
  cache: {}

semgrep_ci_report:
  stage: test
  image: returntocorp/semgrep-agent:v1
  script:
    - semgrep-agent --publish-deployment $SEMGREP_DEPLOYMENT_ID --publish-token $SEMGREP_APP_TOKEN
  needs: []

jest-junit:
  stage: test
  script:
    - "npx jest --ci --reporters=default --reporters=jest-junit --passWithNoTests"
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
  needs: []

compile_typescript:
  stage: build
  script:
    - npm install --only-dev
    - npx tsc --version
    - npx tsc
  artifacts:
    paths:
      - dist

pm2_start:
  stage: deploy
  script:
    - npx pm2 start dist/src/index.js
  needs: ["compile_typescript"]
