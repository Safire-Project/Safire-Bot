# SPDX-License-Identifier: MIT OR CC0-1.0
# Bryn (Safire Project)

image: node:16.3.0-alpine3.13

variables:
  SAST_EXPERIMENTAL_FEATURES: "true"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

cache:
  paths:
    - node_modules/

stages:
  - init
  - lint
  - test
  - build
  - release
  - prestaging
  - staging
  - predeploy
  - deploy

before_script:
  - echo "Pipeline ID = $CI_PIPELINE_ID"
  - echo "Project name = $CI_PROJECT_NAME"
  - echo "Build ref = $CI_BUILD_REF_NAME"

initialize-npm:
  stage: init
  script:
    - npm ci
  dependencies: []

eslint:
  stage: lint
  script:
    - NODE_ENV=development npm install
    - npx eslint . --ext .ts --format gitlab --ignore-path .gitignore
  artifacts:
    reports:
      codequality: gl-codequality.json
  needs: ["initialize-npm"]
  dependencies: []

sast:
  stage: test
  needs: []

include:
  - template: Security/SAST.gitlab-ci.yml

semgrep-sast:
  cache: {}

semgrep-ci-report:
  stage: test
  image: returntocorp/semgrep-agent:v1
  script:
    - semgrep-agent --publish-deployment $SEMGREP_DEPLOYMENT_ID --publish-token $SEMGREP_APP_TOKEN
  needs: []

jest-junit:
  stage: test
  script:
    - NODE_ENV=development npm install
    - npx jest --ci --reporters=default --reporters=jest-junit --passWithNoTests
  artifacts:
    expire_in: 1 month
    when: always
    reports:
      junit:
        - junit.xml
  needs: ["initialize-npm"]
  dependencies: []

compile-typescript:
  stage: build
  script:
    - NODE_ENV=development npm install
    - npx tsc
  artifacts:
    expire_in: 1 month
    paths:
      - dist
  needs: ["initialize-npm"]
  only:
    - tags

docker-build:
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  stage: build
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  needs: ["initialize-npm"]
  dependencies: []

upload-package:
  stage: release
  script:
    - echo "//${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}">.npmrc
    - npm publish
  needs: ["compile-typescript"]
  only:
    - tags

staging-deploy:
  image: docker:20.10.7
  #  tags:
  #    - safire
  stage: staging
  services:
    - docker:20.10.7-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - echo DISCORD_TOKEN=$DISCORD_TOKEN >> .env
    - echo NODE_ENV=ci >> .env
    - echo commandCenter=$commandCenter >> .env
    - echo webhookURL=$webhookURL >> .env
    - echo webhookToken=$webhookToken >> .env
    - echo webhookID=$webhookID >> .env
    - docker run --env-file=.env $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  needs: ["docker-build"]
  dependencies: []
