image: node:current-alpine

stages:
  - init
  - lint
  - test
  - build
  - prestaging
  - staging
  - predeploy
  - deploy

before_script:
  - echo "Pipeline ID = $CI_PIPELINE_ID"
  - echo "Project name = $CI_PROJECT_NAME"
  - echo "Build ref = $CI_BUILD_REF_NAME"

cache:
  paths:
    - node_modules/

initialize-npm:
  stage: init
  script:
    - npm install
    - npm install --only-dev
    - echo DISCORD_TOKEN=$DISCORD_TOKEN >> .env

eslint:
  stage: lint
  script:
    - npx eslint . --ext .ts --format gitlab --ignore-path .gitignore
  artifacts:
    reports:
      codequality: gl-codequality.json
  needs: ["initialize-npm"]

sast:
  stage: test
  needs: []

include:
  - template: Security/SAST.gitlab-ci.yml

variables:
  SAST_EXPERIMENTAL_FEATURES: "true"
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_TLS_CERTDIR: ""

semgrep-sast:
  cache: {}

semgrep-ci-report:
  stage: test
  image: returntocorp/semgrep-agent:v1
  script:
    - semgrep-agent --publish-deployment $SEMGREP_DEPLOYMENT_ID --publish-token $SEMGREP_APP_TOKEN
  needs: []

jest-junit:
  stage: test
  script:
    - npx jest --ci --reporters=default --reporters=jest-junit --passWithNoTests
  artifacts:
    expire_in: 1 month
    when: always
    reports:
      junit:
        - junit.xml
  needs: ["initialize-npm"]

compile-typescript:
  stage: build
  script:
    - npx tsc
  artifacts:
    expire_in: 1 month
    paths:
      - dist
  needs: ["initialize-npm"]

docker-compose:
  image: docker/compose
  stage: deploy
  services:
    - docker:dind
  script:
    - docker-compose up
  needs: ["compile-typescript"]
